name: Validate build

env:
  configuration: Release

on:
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: Build and test the solution
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11

    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v1
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      run: |
        mkdir -p ./.sonar/scanner
        dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
    - name: Start analyzation with SonarCloud
      run: ./.sonar/scanner/dotnet-sonarscanner begin /k:"SiT-Academy-Students_SiT.Scheduler" /o:"sit-academy-students" /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"

    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore --configuration ${{env.configuration}}
    - name: Test
      run: dotnet test --no-build --configuration ${{env.configuration}} /p:CollectCoverage=true /p:CoverletOutputFormat=opencover

    - name: Finalize analyzation with SonarCloud
      run: ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
